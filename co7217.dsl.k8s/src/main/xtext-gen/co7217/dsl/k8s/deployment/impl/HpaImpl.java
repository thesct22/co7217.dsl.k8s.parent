/**
 * generated by Xtext 2.25.0
 */
package co7217.dsl.k8s.deployment.impl;

import co7217.dsl.k8s.deployment.DeploymentPackage;
import co7217.dsl.k8s.deployment.Hpa;
import co7217.dsl.k8s.deployment.Metrice;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Hpa</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co7217.dsl.k8s.deployment.impl.HpaImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link co7217.dsl.k8s.deployment.impl.HpaImpl#getMinimum <em>Minimum</em>}</li>
 *   <li>{@link co7217.dsl.k8s.deployment.impl.HpaImpl#getMaximum <em>Maximum</em>}</li>
 *   <li>{@link co7217.dsl.k8s.deployment.impl.HpaImpl#getMetrices <em>Metrices</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HpaImpl extends HeaderImpl implements Hpa
{
  /**
   * The default value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected static final String TARGET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected String target = TARGET_EDEFAULT;

  /**
   * The default value of the '{@link #getMinimum() <em>Minimum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinimum()
   * @generated
   * @ordered
   */
  protected static final int MINIMUM_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinimum() <em>Minimum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinimum()
   * @generated
   * @ordered
   */
  protected int minimum = MINIMUM_EDEFAULT;

  /**
   * The default value of the '{@link #getMaximum() <em>Maximum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaximum()
   * @generated
   * @ordered
   */
  protected static final int MAXIMUM_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaximum() <em>Maximum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaximum()
   * @generated
   * @ordered
   */
  protected int maximum = MAXIMUM_EDEFAULT;

  /**
   * The cached value of the '{@link #getMetrices() <em>Metrices</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetrices()
   * @generated
   * @ordered
   */
  protected EList<Metrice> metrices;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HpaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeploymentPackage.Literals.HPA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(String newTarget)
  {
    String oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeploymentPackage.HPA__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMinimum()
  {
    return minimum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinimum(int newMinimum)
  {
    int oldMinimum = minimum;
    minimum = newMinimum;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeploymentPackage.HPA__MINIMUM, oldMinimum, minimum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMaximum()
  {
    return maximum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaximum(int newMaximum)
  {
    int oldMaximum = maximum;
    maximum = newMaximum;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeploymentPackage.HPA__MAXIMUM, oldMaximum, maximum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Metrice> getMetrices()
  {
    if (metrices == null)
    {
      metrices = new EObjectContainmentEList<Metrice>(Metrice.class, this, DeploymentPackage.HPA__METRICES);
    }
    return metrices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeploymentPackage.HPA__METRICES:
        return ((InternalEList<?>)getMetrices()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeploymentPackage.HPA__TARGET:
        return getTarget();
      case DeploymentPackage.HPA__MINIMUM:
        return getMinimum();
      case DeploymentPackage.HPA__MAXIMUM:
        return getMaximum();
      case DeploymentPackage.HPA__METRICES:
        return getMetrices();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeploymentPackage.HPA__TARGET:
        setTarget((String)newValue);
        return;
      case DeploymentPackage.HPA__MINIMUM:
        setMinimum((Integer)newValue);
        return;
      case DeploymentPackage.HPA__MAXIMUM:
        setMaximum((Integer)newValue);
        return;
      case DeploymentPackage.HPA__METRICES:
        getMetrices().clear();
        getMetrices().addAll((Collection<? extends Metrice>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeploymentPackage.HPA__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case DeploymentPackage.HPA__MINIMUM:
        setMinimum(MINIMUM_EDEFAULT);
        return;
      case DeploymentPackage.HPA__MAXIMUM:
        setMaximum(MAXIMUM_EDEFAULT);
        return;
      case DeploymentPackage.HPA__METRICES:
        getMetrices().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeploymentPackage.HPA__TARGET:
        return TARGET_EDEFAULT == null ? target != null : !TARGET_EDEFAULT.equals(target);
      case DeploymentPackage.HPA__MINIMUM:
        return minimum != MINIMUM_EDEFAULT;
      case DeploymentPackage.HPA__MAXIMUM:
        return maximum != MAXIMUM_EDEFAULT;
      case DeploymentPackage.HPA__METRICES:
        return metrices != null && !metrices.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (Target: ");
    result.append(target);
    result.append(", Minimum: ");
    result.append(minimum);
    result.append(", Maximum: ");
    result.append(maximum);
    result.append(')');
    return result.toString();
  }

} //HpaImpl
