/*
 * generated by Xtext 2.25.0
 */
package co7217.dsl.k8s.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DeploymentGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Model");
		private final Assignment cHeadersAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHeadersHeaderParserRuleCall_0 = (RuleCall)cHeadersAssignment.eContents().get(0);
		
		//Model:
		//    (Headers+=Header)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Headers+=Header)*
		public Assignment getHeadersAssignment() { return cHeadersAssignment; }
		
		//Header
		public RuleCall getHeadersHeaderParserRuleCall_0() { return cHeadersHeaderParserRuleCall_0; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Header");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHpaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSvcParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Header:
		//    Hpa|Dep|Svc
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Hpa|Dep|Svc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Hpa
		public RuleCall getHpaParserRuleCall_0() { return cHpaParserRuleCall_0; }
		
		//Dep
		public RuleCall getDepParserRuleCall_1() { return cDepParserRuleCall_1; }
		
		//Svc
		public RuleCall getSvcParserRuleCall_2() { return cSvcParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Label:
		//    name=ID '=' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cImageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cImageAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cImageSTRINGTerminalRuleCall_8_0 = (RuleCall)cImageAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Container:
		//    'container' '{'
		//        'name' '=' Name=STRING ','
		//        'image' '=' Image=STRING
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'container' '{'
		//    'name' '=' Name=STRING ','
		//    'image' '=' Image=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//Name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'image'
		public Keyword getImageKeyword_6() { return cImageKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Image=STRING
		public Assignment getImageAssignment_8() { return cImageAssignment_8; }
		
		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_8_0() { return cImageSTRINGTerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MetriceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Metrice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResourceResourceParserRuleCall_0_0 = (RuleCall)cResourceAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitINTTerminalRuleCall_2_0 = (RuleCall)cLimitAssignment_2.eContents().get(0);
		
		//Metrice:
		//    ((resource=Resource) '=' limit=INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((resource=Resource) '=' limit=INT)
		public Group getGroup() { return cGroup; }
		
		//(resource=Resource)
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }
		
		//Resource
		public RuleCall getResourceResourceParserRuleCall_0_0() { return cResourceResourceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//limit=INT
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }
		
		//INT
		public RuleCall getLimitINTTerminalRuleCall_2_0() { return cLimitINTTerminalRuleCall_2_0; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Resource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMemoryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCpuKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Resource:
		//    'memory' | 'cpu'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'memory' | 'cpu'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'memory'
		public Keyword getMemoryKeyword_0() { return cMemoryKeyword_0; }
		
		//'cpu'
		public Keyword getCpuKeyword_1() { return cCpuKeyword_1; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cProtocolKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cProtocolAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProtocolProtocolParserRuleCall_8_0 = (RuleCall)cProtocolAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cInportKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cInportAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInportINTTerminalRuleCall_12_0 = (RuleCall)cInportAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTargetportKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cTargetportAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cTargetportINTTerminalRuleCall_16_0 = (RuleCall)cTargetportAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//Port:
		//    'port' '{'
		//    'name' '=' Name=STRING ','
		//    'protocol' '=' Protocol=Protocol ','
		//    'inport' '=' inport=INT ','
		//    'targetport' '=' targetport=INT
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'port' '{'
		//'name' '=' Name=STRING ','
		//'protocol' '=' Protocol=Protocol ','
		//'inport' '=' inport=INT ','
		//'targetport' '=' targetport=INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//Name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'protocol'
		public Keyword getProtocolKeyword_6() { return cProtocolKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Protocol=Protocol
		public Assignment getProtocolAssignment_8() { return cProtocolAssignment_8; }
		
		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_8_0() { return cProtocolProtocolParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'inport'
		public Keyword getInportKeyword_10() { return cInportKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//inport=INT
		public Assignment getInportAssignment_12() { return cInportAssignment_12; }
		
		//INT
		public RuleCall getInportINTTerminalRuleCall_12_0() { return cInportINTTerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//'targetport'
		public Keyword getTargetportKeyword_14() { return cTargetportKeyword_14; }
		
		//'='
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }
		
		//targetport=INT
		public Assignment getTargetportAssignment_16() { return cTargetportAssignment_16; }
		
		//INT
		public RuleCall getTargetportINTTerminalRuleCall_16_0() { return cTargetportINTTerminalRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Protocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTCPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUDPKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHTTPKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHTTPSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Protocol:
		//    'TCP' | 'UDP' | 'HTTP'| 'HTTPS'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TCP' | 'UDP' | 'HTTP'| 'HTTPS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'TCP'
		public Keyword getTCPKeyword_0() { return cTCPKeyword_0; }
		
		//'UDP'
		public Keyword getUDPKeyword_1() { return cUDPKeyword_1; }
		
		//'HTTP'
		public Keyword getHTTPKeyword_2() { return cHTTPKeyword_2; }
		
		//'HTTPS'
		public Keyword getHTTPSKeyword_3() { return cHTTPSKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLoadBalancerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNodePortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClusterIPKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'LoadBalancer' | 'NodePort' | 'ClusterIP'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'LoadBalancer' | 'NodePort' | 'ClusterIP'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LoadBalancer'
		public Keyword getLoadBalancerKeyword_0() { return cLoadBalancerKeyword_0; }
		
		//'NodePort'
		public Keyword getNodePortKeyword_1() { return cNodePortKeyword_1; }
		
		//'ClusterIP'
		public Keyword getClusterIPKeyword_2() { return cClusterIPKeyword_2; }
	}
	public class DepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Dep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDeploymentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNamespaceKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cNamespaceAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cNamespaceAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLabelKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cLabelsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLabelsLabelParserRuleCall_11_0 = (RuleCall)cLabelsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cLabelsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_12_1_0 = (RuleCall)cLabelsAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cReplicasKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cEqualsSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cReplicasAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cReplicasINTTerminalRuleCall_17_0 = (RuleCall)cReplicasAssignment_17.eContents().get(0);
		private final Keyword cCommaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cContainersAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cContainersContainerParserRuleCall_19_0 = (RuleCall)cContainersAssignment_19.eContents().get(0);
		private final Group cGroup_20 = (Group)cGroup.eContents().get(20);
		private final Keyword cCommaKeyword_20_0 = (Keyword)cGroup_20.eContents().get(0);
		private final Assignment cContainersAssignment_20_1 = (Assignment)cGroup_20.eContents().get(1);
		private final RuleCall cContainersContainerParserRuleCall_20_1_0 = (RuleCall)cContainersAssignment_20_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		
		////for Deployment part parsing
		//Dep:
		//    '---'
		//    'deployment'
		//    '---'
		//'{'
		//    'name' '=' Name=STRING ','
		//    ('namespace' '=' Namespace=STRING  ',')?
		//    'label'
		//        '{'
		//            (Labels+=Label)
		//            (',' Labels+=Label)*
		//    '}' ','
		//    'replicas' '=' Replicas=INT ','
		//    Containers+=Container
		//    (',' Containers+=Container)*
		//'}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    '---'
		//    'deployment'
		//    '---'
		//'{'
		//    'name' '=' Name=STRING ','
		//    ('namespace' '=' Namespace=STRING  ',')?
		//    'label'
		//        '{'
		//            (Labels+=Label)
		//            (',' Labels+=Label)*
		//    '}' ','
		//    'replicas' '=' Replicas=INT ','
		//    Containers+=Container
		//    (',' Containers+=Container)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_0; }
		
		//'deployment'
		public Keyword getDeploymentKeyword_1() { return cDeploymentKeyword_1; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_2() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'name'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//('namespace' '=' Namespace=STRING  ',')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_8_0() { return cNamespaceKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//Namespace=STRING
		public Assignment getNamespaceAssignment_8_2() { return cNamespaceAssignment_8_2; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_8_2_0() { return cNamespaceSTRINGTerminalRuleCall_8_2_0; }
		
		//','
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }
		
		//'label'
		public Keyword getLabelKeyword_9() { return cLabelKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//(Labels+=Label)
		public Assignment getLabelsAssignment_11() { return cLabelsAssignment_11; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_11_0() { return cLabelsLabelParserRuleCall_11_0; }
		
		//(',' Labels+=Label)*
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//Labels+=Label
		public Assignment getLabelsAssignment_12_1() { return cLabelsAssignment_12_1; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_12_1_0() { return cLabelsLabelParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'replicas'
		public Keyword getReplicasKeyword_15() { return cReplicasKeyword_15; }
		
		//'='
		public Keyword getEqualsSignKeyword_16() { return cEqualsSignKeyword_16; }
		
		//Replicas=INT
		public Assignment getReplicasAssignment_17() { return cReplicasAssignment_17; }
		
		//INT
		public RuleCall getReplicasINTTerminalRuleCall_17_0() { return cReplicasINTTerminalRuleCall_17_0; }
		
		//','
		public Keyword getCommaKeyword_18() { return cCommaKeyword_18; }
		
		//Containers+=Container
		public Assignment getContainersAssignment_19() { return cContainersAssignment_19; }
		
		//Container
		public RuleCall getContainersContainerParserRuleCall_19_0() { return cContainersContainerParserRuleCall_19_0; }
		
		//(',' Containers+=Container)*
		public Group getGroup_20() { return cGroup_20; }
		
		//','
		public Keyword getCommaKeyword_20_0() { return cCommaKeyword_20_0; }
		
		//Containers+=Container
		public Assignment getContainersAssignment_20_1() { return cContainersAssignment_20_1; }
		
		//Container
		public RuleCall getContainersContainerParserRuleCall_20_1_0() { return cContainersContainerParserRuleCall_20_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }
	}
	public class HpaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Hpa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHpaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNamespaceKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cNamespaceAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cNamespaceAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLabelKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cLabelsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLabelsLabelParserRuleCall_11_0 = (RuleCall)cLabelsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cLabelsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_12_1_0 = (RuleCall)cLabelsAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cTargetKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cEqualsSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cTargetAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cTargetSTRINGTerminalRuleCall_17_0 = (RuleCall)cTargetAssignment_17.eContents().get(0);
		private final Keyword cCommaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cMinimumKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cEqualsSignKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cMinimumAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cMinimumINTTerminalRuleCall_21_0 = (RuleCall)cMinimumAssignment_21.eContents().get(0);
		private final Keyword cCommaKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cMaximumKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Keyword cEqualsSignKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cMaximumAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cMaximumINTTerminalRuleCall_25_0 = (RuleCall)cMaximumAssignment_25.eContents().get(0);
		private final Keyword cCommaKeyword_26 = (Keyword)cGroup.eContents().get(26);
		private final Keyword cMetricesKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cLeftCurlyBracketKeyword_28 = (Keyword)cGroup.eContents().get(28);
		private final Assignment cMetricesAssignment_29 = (Assignment)cGroup.eContents().get(29);
		private final RuleCall cMetricesMetriceParserRuleCall_29_0 = (RuleCall)cMetricesAssignment_29.eContents().get(0);
		private final Group cGroup_30 = (Group)cGroup.eContents().get(30);
		private final Keyword cCommaKeyword_30_0 = (Keyword)cGroup_30.eContents().get(0);
		private final Assignment cMetricesAssignment_30_1 = (Assignment)cGroup_30.eContents().get(1);
		private final RuleCall cMetricesMetriceParserRuleCall_30_1_0 = (RuleCall)cMetricesAssignment_30_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_31 = (Keyword)cGroup.eContents().get(31);
		private final Keyword cRightCurlyBracketKeyword_32 = (Keyword)cGroup.eContents().get(32);
		
		////for HPA part parsing
		//Hpa:
		//    '---'
		//    'hpa'
		//    '---'
		//    '{'
		//        'name' '=' Name=STRING ','
		//        ('namespace' '=' Namespace=STRING  ',')?
		//        'label'
		//        '{'
		//            (Labels+=Label)
		//            (',' Labels+=Label)*
		//        '}' ','
		//        'target' '=' Target=STRING ','
		//        'minimum' '=' Minimum=INT ','
		//        'maximum' '=' Maximum=INT ','
		//        'metrices'
		//        '{'
		//            Metrices+=Metrice
		//            (',' Metrices+=Metrice)?
		//        '}'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'---'
		//'hpa'
		//'---'
		//'{'
		//    'name' '=' Name=STRING ','
		//    ('namespace' '=' Namespace=STRING  ',')?
		//    'label'
		//    '{'
		//        (Labels+=Label)
		//        (',' Labels+=Label)*
		//    '}' ','
		//    'target' '=' Target=STRING ','
		//    'minimum' '=' Minimum=INT ','
		//    'maximum' '=' Maximum=INT ','
		//    'metrices'
		//    '{'
		//        Metrices+=Metrice
		//        (',' Metrices+=Metrice)?
		//    '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_0; }
		
		//'hpa'
		public Keyword getHpaKeyword_1() { return cHpaKeyword_1; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_2() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'name'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//('namespace' '=' Namespace=STRING  ',')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_8_0() { return cNamespaceKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//Namespace=STRING
		public Assignment getNamespaceAssignment_8_2() { return cNamespaceAssignment_8_2; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_8_2_0() { return cNamespaceSTRINGTerminalRuleCall_8_2_0; }
		
		//','
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }
		
		//'label'
		public Keyword getLabelKeyword_9() { return cLabelKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//(Labels+=Label)
		public Assignment getLabelsAssignment_11() { return cLabelsAssignment_11; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_11_0() { return cLabelsLabelParserRuleCall_11_0; }
		
		//(',' Labels+=Label)*
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//Labels+=Label
		public Assignment getLabelsAssignment_12_1() { return cLabelsAssignment_12_1; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_12_1_0() { return cLabelsLabelParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'target'
		public Keyword getTargetKeyword_15() { return cTargetKeyword_15; }
		
		//'='
		public Keyword getEqualsSignKeyword_16() { return cEqualsSignKeyword_16; }
		
		//Target=STRING
		public Assignment getTargetAssignment_17() { return cTargetAssignment_17; }
		
		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_17_0() { return cTargetSTRINGTerminalRuleCall_17_0; }
		
		//','
		public Keyword getCommaKeyword_18() { return cCommaKeyword_18; }
		
		//'minimum'
		public Keyword getMinimumKeyword_19() { return cMinimumKeyword_19; }
		
		//'='
		public Keyword getEqualsSignKeyword_20() { return cEqualsSignKeyword_20; }
		
		//Minimum=INT
		public Assignment getMinimumAssignment_21() { return cMinimumAssignment_21; }
		
		//INT
		public RuleCall getMinimumINTTerminalRuleCall_21_0() { return cMinimumINTTerminalRuleCall_21_0; }
		
		//','
		public Keyword getCommaKeyword_22() { return cCommaKeyword_22; }
		
		//'maximum'
		public Keyword getMaximumKeyword_23() { return cMaximumKeyword_23; }
		
		//'='
		public Keyword getEqualsSignKeyword_24() { return cEqualsSignKeyword_24; }
		
		//Maximum=INT
		public Assignment getMaximumAssignment_25() { return cMaximumAssignment_25; }
		
		//INT
		public RuleCall getMaximumINTTerminalRuleCall_25_0() { return cMaximumINTTerminalRuleCall_25_0; }
		
		//','
		public Keyword getCommaKeyword_26() { return cCommaKeyword_26; }
		
		//'metrices'
		public Keyword getMetricesKeyword_27() { return cMetricesKeyword_27; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_28() { return cLeftCurlyBracketKeyword_28; }
		
		//Metrices+=Metrice
		public Assignment getMetricesAssignment_29() { return cMetricesAssignment_29; }
		
		//Metrice
		public RuleCall getMetricesMetriceParserRuleCall_29_0() { return cMetricesMetriceParserRuleCall_29_0; }
		
		//(',' Metrices+=Metrice)?
		public Group getGroup_30() { return cGroup_30; }
		
		//','
		public Keyword getCommaKeyword_30_0() { return cCommaKeyword_30_0; }
		
		//Metrices+=Metrice
		public Assignment getMetricesAssignment_30_1() { return cMetricesAssignment_30_1; }
		
		//Metrice
		public RuleCall getMetricesMetriceParserRuleCall_30_1_0() { return cMetricesMetriceParserRuleCall_30_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_31() { return cRightCurlyBracketKeyword_31; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_32() { return cRightCurlyBracketKeyword_32; }
	}
	public class SvcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.k8s.Deployment.Svc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNamespaceKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cNamespaceAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cNamespaceAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLabelKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cLabelsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLabelsLabelParserRuleCall_11_0 = (RuleCall)cLabelsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cLabelsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_12_1_0 = (RuleCall)cLabelsAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Assignment cPortsAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final RuleCall cPortsPortParserRuleCall_15_0_0 = (RuleCall)cPortsAssignment_15_0.eContents().get(0);
		private final Keyword cCommaKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cTargetLabelKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTargetLabelAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTargetLabelSTRINGTerminalRuleCall_18_0 = (RuleCall)cTargetLabelAssignment_18.eContents().get(0);
		private final Keyword cCommaKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cTargetNameKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cEqualsSignKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Assignment cTargetNameAssignment_22 = (Assignment)cGroup.eContents().get(22);
		private final RuleCall cTargetNameSTRINGTerminalRuleCall_22_0 = (RuleCall)cTargetNameAssignment_22.eContents().get(0);
		private final Keyword cCommaKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Keyword cTypeKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Keyword cEqualsSignKeyword_25 = (Keyword)cGroup.eContents().get(25);
		private final Assignment cTypeAssignment_26 = (Assignment)cGroup.eContents().get(26);
		private final RuleCall cTypeTypeParserRuleCall_26_0 = (RuleCall)cTypeAssignment_26.eContents().get(0);
		private final Group cGroup_27 = (Group)cGroup.eContents().get(27);
		private final Keyword cCommaKeyword_27_0 = (Keyword)cGroup_27.eContents().get(0);
		private final Keyword cIPKeyword_27_1 = (Keyword)cGroup_27.eContents().get(1);
		private final Keyword cEqualsSignKeyword_27_2 = (Keyword)cGroup_27.eContents().get(2);
		private final Assignment cIPAssignment_27_3 = (Assignment)cGroup_27.eContents().get(3);
		private final RuleCall cIPSTRINGTerminalRuleCall_27_3_0 = (RuleCall)cIPAssignment_27_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_28 = (Keyword)cGroup.eContents().get(28);
		
		////for Service part parsing
		//Svc:
		//    '---'
		//    'service'
		//    '---'
		//    '{'
		//        'name' '=' Name=STRING ','
		//        ('namespace' '=' Namespace=STRING  ',')?
		//        'label'
		//        '{'
		//            (Labels+=Label)
		//            (',' Labels+=Label)*
		//        '}' ','
		//        (Ports+=Port ',')+
		//        'targetLabel' '=' TargetLabel=STRING ','
		//        'targetName' '=' TargetName=STRING ','
		//        'type' '=' Type=Type
		//        (',' 'IP' '=' IP=STRING)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'---'
		//'service'
		//'---'
		//'{'
		//    'name' '=' Name=STRING ','
		//    ('namespace' '=' Namespace=STRING  ',')?
		//    'label'
		//    '{'
		//        (Labels+=Label)
		//        (',' Labels+=Label)*
		//    '}' ','
		//    (Ports+=Port ',')+
		//    'targetLabel' '=' TargetLabel=STRING ','
		//    'targetName' '=' TargetName=STRING ','
		//    'type' '=' Type=Type
		//    (',' 'IP' '=' IP=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_0; }
		
		//'service'
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }
		
		//'---'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusKeyword_2() { return cHyphenMinusHyphenMinusHyphenMinusKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'name'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//Name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//('namespace' '=' Namespace=STRING  ',')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_8_0() { return cNamespaceKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//Namespace=STRING
		public Assignment getNamespaceAssignment_8_2() { return cNamespaceAssignment_8_2; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_8_2_0() { return cNamespaceSTRINGTerminalRuleCall_8_2_0; }
		
		//','
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }
		
		//'label'
		public Keyword getLabelKeyword_9() { return cLabelKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//(Labels+=Label)
		public Assignment getLabelsAssignment_11() { return cLabelsAssignment_11; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_11_0() { return cLabelsLabelParserRuleCall_11_0; }
		
		//(',' Labels+=Label)*
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//Labels+=Label
		public Assignment getLabelsAssignment_12_1() { return cLabelsAssignment_12_1; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_12_1_0() { return cLabelsLabelParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//(Ports+=Port ',')+
		public Group getGroup_15() { return cGroup_15; }
		
		//Ports+=Port
		public Assignment getPortsAssignment_15_0() { return cPortsAssignment_15_0; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_15_0_0() { return cPortsPortParserRuleCall_15_0_0; }
		
		//','
		public Keyword getCommaKeyword_15_1() { return cCommaKeyword_15_1; }
		
		//'targetLabel'
		public Keyword getTargetLabelKeyword_16() { return cTargetLabelKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//TargetLabel=STRING
		public Assignment getTargetLabelAssignment_18() { return cTargetLabelAssignment_18; }
		
		//STRING
		public RuleCall getTargetLabelSTRINGTerminalRuleCall_18_0() { return cTargetLabelSTRINGTerminalRuleCall_18_0; }
		
		//','
		public Keyword getCommaKeyword_19() { return cCommaKeyword_19; }
		
		//'targetName'
		public Keyword getTargetNameKeyword_20() { return cTargetNameKeyword_20; }
		
		//'='
		public Keyword getEqualsSignKeyword_21() { return cEqualsSignKeyword_21; }
		
		//TargetName=STRING
		public Assignment getTargetNameAssignment_22() { return cTargetNameAssignment_22; }
		
		//STRING
		public RuleCall getTargetNameSTRINGTerminalRuleCall_22_0() { return cTargetNameSTRINGTerminalRuleCall_22_0; }
		
		//','
		public Keyword getCommaKeyword_23() { return cCommaKeyword_23; }
		
		//'type'
		public Keyword getTypeKeyword_24() { return cTypeKeyword_24; }
		
		//'='
		public Keyword getEqualsSignKeyword_25() { return cEqualsSignKeyword_25; }
		
		//Type=Type
		public Assignment getTypeAssignment_26() { return cTypeAssignment_26; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_26_0() { return cTypeTypeParserRuleCall_26_0; }
		
		//(',' 'IP' '=' IP=STRING)?
		public Group getGroup_27() { return cGroup_27; }
		
		//','
		public Keyword getCommaKeyword_27_0() { return cCommaKeyword_27_0; }
		
		//'IP'
		public Keyword getIPKeyword_27_1() { return cIPKeyword_27_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_27_2() { return cEqualsSignKeyword_27_2; }
		
		//IP=STRING
		public Assignment getIPAssignment_27_3() { return cIPAssignment_27_3; }
		
		//STRING
		public RuleCall getIPSTRINGTerminalRuleCall_27_3_0() { return cIPSTRINGTerminalRuleCall_27_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_28() { return cRightCurlyBracketKeyword_28; }
	}
	
	
	private final ModelElements pModel;
	private final HeaderElements pHeader;
	private final LabelElements pLabel;
	private final ContainerElements pContainer;
	private final MetriceElements pMetrice;
	private final ResourceElements pResource;
	private final PortElements pPort;
	private final ProtocolElements pProtocol;
	private final TypeElements pType;
	private final DepElements pDep;
	private final HpaElements pHpa;
	private final SvcElements pSvc;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeploymentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHeader = new HeaderElements();
		this.pLabel = new LabelElements();
		this.pContainer = new ContainerElements();
		this.pMetrice = new MetriceElements();
		this.pResource = new ResourceElements();
		this.pPort = new PortElements();
		this.pProtocol = new ProtocolElements();
		this.pType = new TypeElements();
		this.pDep = new DepElements();
		this.pHpa = new HpaElements();
		this.pSvc = new SvcElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co7217.dsl.k8s.Deployment".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (Headers+=Header)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Header:
	//    Hpa|Dep|Svc
	//;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Label:
	//    name=ID '=' value=STRING
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Container:
	//    'container' '{'
	//        'name' '=' Name=STRING ','
	//        'image' '=' Image=STRING
	//    '}'
	//;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Metrice:
	//    ((resource=Resource) '=' limit=INT)
	//;
	public MetriceElements getMetriceAccess() {
		return pMetrice;
	}
	
	public ParserRule getMetriceRule() {
		return getMetriceAccess().getRule();
	}
	
	//Resource:
	//    'memory' | 'cpu'
	//;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//Port:
	//    'port' '{'
	//    'name' '=' Name=STRING ','
	//    'protocol' '=' Protocol=Protocol ','
	//    'inport' '=' inport=INT ','
	//    'targetport' '=' targetport=INT
	//    '}'
	//;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Protocol:
	//    'TCP' | 'UDP' | 'HTTP'| 'HTTPS'
	//;
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//Type:
	//    'LoadBalancer' | 'NodePort' | 'ClusterIP'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////for Deployment part parsing
	//Dep:
	//    '---'
	//    'deployment'
	//    '---'
	//'{'
	//    'name' '=' Name=STRING ','
	//    ('namespace' '=' Namespace=STRING  ',')?
	//    'label'
	//        '{'
	//            (Labels+=Label)
	//            (',' Labels+=Label)*
	//    '}' ','
	//    'replicas' '=' Replicas=INT ','
	//    Containers+=Container
	//    (',' Containers+=Container)*
	//'}'
	//;
	public DepElements getDepAccess() {
		return pDep;
	}
	
	public ParserRule getDepRule() {
		return getDepAccess().getRule();
	}
	
	////for HPA part parsing
	//Hpa:
	//    '---'
	//    'hpa'
	//    '---'
	//    '{'
	//        'name' '=' Name=STRING ','
	//        ('namespace' '=' Namespace=STRING  ',')?
	//        'label'
	//        '{'
	//            (Labels+=Label)
	//            (',' Labels+=Label)*
	//        '}' ','
	//        'target' '=' Target=STRING ','
	//        'minimum' '=' Minimum=INT ','
	//        'maximum' '=' Maximum=INT ','
	//        'metrices'
	//        '{'
	//            Metrices+=Metrice
	//            (',' Metrices+=Metrice)?
	//        '}'
	//    '}'
	//;
	public HpaElements getHpaAccess() {
		return pHpa;
	}
	
	public ParserRule getHpaRule() {
		return getHpaAccess().getRule();
	}
	
	////for Service part parsing
	//Svc:
	//    '---'
	//    'service'
	//    '---'
	//    '{'
	//        'name' '=' Name=STRING ','
	//        ('namespace' '=' Namespace=STRING  ',')?
	//        'label'
	//        '{'
	//            (Labels+=Label)
	//            (',' Labels+=Label)*
	//        '}' ','
	//        (Ports+=Port ',')+
	//        'targetLabel' '=' TargetLabel=STRING ','
	//        'targetName' '=' TargetName=STRING ','
	//        'type' '=' Type=Type
	//        (',' 'IP' '=' IP=STRING)?
	//    '}'
	//;
	public SvcElements getSvcAccess() {
		return pSvc;
	}
	
	public ParserRule getSvcRule() {
		return getSvcAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
