/*
 * generated by Xtext 2.25.0
 */
package co7217.dsl.k8s.serializer;

import co7217.dsl.k8s.deployment.Container;
import co7217.dsl.k8s.deployment.Dep;
import co7217.dsl.k8s.deployment.DeploymentPackage;
import co7217.dsl.k8s.deployment.Hpa;
import co7217.dsl.k8s.deployment.Label;
import co7217.dsl.k8s.deployment.Metrice;
import co7217.dsl.k8s.deployment.Model;
import co7217.dsl.k8s.services.DeploymentGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DeploymentSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DeploymentGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeploymentPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeploymentPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case DeploymentPackage.DEP:
				sequence_Dep(context, (Dep) semanticObject); 
				return; 
			case DeploymentPackage.HPA:
				sequence_Hpa(context, (Hpa) semanticObject); 
				return; 
			case DeploymentPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case DeploymentPackage.METRICE:
				sequence_Metrice(context, (Metrice) semanticObject); 
				return; 
			case DeploymentPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (Name=STRING Image=STRING)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.CONTAINER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.CONTAINER__NAME));
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.CONTAINER__IMAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.CONTAINER__IMAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContainerAccess().getImageSTRINGTerminalRuleCall_8_0(), semanticObject.getImage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Dep
	 *     Dep returns Dep
	 *
	 * Constraint:
	 *     (
	 *         Name=STRING 
	 *         Namespace=STRING? 
	 *         Labels+=Label 
	 *         Labels+=Label* 
	 *         Replicas=INT 
	 *         Containers+=Container 
	 *         Containers+=Container*
	 *     )
	 */
	protected void sequence_Dep(ISerializationContext context, Dep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Hpa
	 *     Hpa returns Hpa
	 *
	 * Constraint:
	 *     (
	 *         Name=STRING 
	 *         Namespace=STRING? 
	 *         Labels+=Label 
	 *         Labels+=Label* 
	 *         Target=STRING 
	 *         Minimum=INT 
	 *         Maximum=INT 
	 *         Metrices+=Metrice 
	 *         Metrices+=Metrice?
	 *     )
	 */
	protected void sequence_Hpa(ISerializationContext context, Hpa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.LABEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.LABEL__NAME));
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.LABEL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.LABEL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLabelAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Metrice returns Metrice
	 *
	 * Constraint:
	 *     (resource=Resource limit=INT)
	 */
	protected void sequence_Metrice(ISerializationContext context, Metrice semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.METRICE__RESOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.METRICE__RESOURCE));
			if (transientValues.isValueTransient(semanticObject, DeploymentPackage.Literals.METRICE__LIMIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeploymentPackage.Literals.METRICE__LIMIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetriceAccess().getResourceResourceParserRuleCall_0_0(), semanticObject.getResource());
		feeder.accept(grammarAccess.getMetriceAccess().getLimitINTTerminalRuleCall_2_0(), semanticObject.getLimit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     Headers+=Header+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
